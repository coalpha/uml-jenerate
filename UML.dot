digraph UML {
   node [
      fontname="Bitstream Vera Sans"
      fontsize=14
      shape=record
   ]

   "Dedupe" [
      label="{
         Dedupe
         |
         +static dedupe_right(ary: Object[]): List\l
         +static dedupe_right(ary: Object[], eq: BiPredicate): List\l
      }"
   ]

   "DOTFile" [
      label="{
         DOTFile
         |
         -final sb: StringBuilder\l
         -final outfile: Path\l
         |
         ~write(): void\l
      }"
   ]

   "FileWalker" [
      label="{
         FileWalker
         |
         ~final filesFound: List\l
         ~final parents: List\l
         |
      }"
   ]

   "fmt" [
      label="{
         fmt
         |
         +static str(m: Method): String\l
         +static str(f: Field): String\l
         +static str(type: Class): String\l
         +static str(mod: int): String\l
         +static str(p: Parameter): String\l
         +static viz(mod: int): char\l
      }"
   ]

   "InnerNode" [
      label="{
         InnerNode
         |
         +toString(): String\l
      }"
   ]

   "Loader" [
      label="{
         Loader
         |
         -final loader: URLClassLoader\l
         |
         ~load(className: String): Result\l
         ~static convertPaths(paths: Stream): URL[]\l
      }"
   ]

   "Main" [
      label="{
         Main
         |
         +static main(args: String[]): void\l
      }"
   ]

   "Node" [
      label="{
         Node
         |
         ~clazz: Class\l
         |
         ~name(): String\l
         +abstract toString(): String\l
         ~static eq(a: Node, b: Node): boolean\l
         ~dot_symbol(): String\l
         ~referenced(): Stream\l
         ~static good_class(node: Node): boolean\l
      }"
   ]

   "OuterNode" [
      label="{
         OuterNode
         |
         +toString(): String\l
      }"
   ]

   "util" [
      label="{
         util
         |
         -static final sc: Scanner\l
         |
         ~static basename(s: String): String\l
         ~static cancel(path: Path): boolean\l
         ~static realpath(path: Path): Path\l
         ~static dedupe_right(ary: Object[]): List\l
         ~static dedupe_right(ary: Object[], eq: BiPredicate): List\l
      }"
   ]
   "Node" -> "InnerNode"
   "Node" -> "OuterNode"
}
